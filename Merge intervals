// Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.





class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& in) {
        sort(in.begin(),in.end());
        int n=in.size();
        vector<vector<int>>v;
        if(n==1) return in;
       for(int i=0;i<n-1;i++){
           if(in[i][1]<in[i+1][0] or in[i+1][1]<in[i][0]){
               if(v.size()>0){
                   v.pop_back();
               }
               v.push_back(in[i]);
               v.push_back(in[i+1]);

           }
           else if(in[i][0]>=in[i+1][0] and in[i][1]<=in[i+1][1]){
                if(v.size()>0){
                  v.pop_back();
               }
               v.push_back(in[i+1]);
           }
           else if(in[i][0]<in[i+1][0] and in[i][1]>in[i+1][1]){
                if(v.size()>0){
                 v.pop_back();
               }
               v.push_back(in[i]);
               in[i+1][0]=in[i][0];
                in[i+1][1]=in[i][1];
           }
           else if(in[i+1][0]<=in[i][1] and in[i+1][1]>=in[i][1]){
                if(v.size()>0){
                   v.pop_back();
               }
               v.push_back({in[i][0],in[i+1][1]});
               in[i+1][0]=in[i][0];
           }
           else if(in[i+1][0]<=in[i][0] and in[i+1][1]>=in[i][0]){
                if(v.size()>0){
                  v.pop_back();
               }
               v.push_back({in[i+1][0],in[i][1]});
               in[i+1][1]=in[i][1];
           }
       }
       sort(v.begin(),v.end());
       return v;
    }
};
