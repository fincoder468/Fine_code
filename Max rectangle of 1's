// Given a binary matrix M of size n X m. Find the maximum area of a rectangle formed only of 1s in the given matrix.



int func(vector<int>&v){
    int n=v.size();
    vector<int>left(n,-1);
    vector<int>right(n,-1);
    stack<int>st;
    st.push(0);
    for(int i=1;i<n;i++){
        if(!st.empty() and v[st.top()]>v[i]){
            while(!st.empty() and v[st.top()]>v[i]){
                left[st.top()]=i;
                st.pop();
            }
            
        }
                st.push(i);
            
    }
    for(int i=0;i<n;i++){
        if(left[i]==-1){
            left[i]=n;
        }
    }
   while(!st.empty()){
       st.pop();
   }
     st.push(n-1);
         for(int i=n-2;i>=0;i--){
        if(!st.empty() and v[st.top()]>v[i]){
            while(!st.empty() and v[st.top()]>v[i]){
                right[st.top()]=i;
                st.pop();
            }
            
        }
                st.push(i);
            
    }
    int mx=0;
    for(int i=0;i<n;i++){
        mx=max(mx,(v[i]*(left[i]-right[i]-1)));
    }
    return mx;
     
}
class Solution{
  public:
  
    int maxArea(int mt[MAX][MAX], int n, int m) {
        vector<vector<int>>a(n,vector<int>(m,0));
        for(int i=0;i<m;i++){
            a[0][i]=mt[0][i];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                if(mt[i][j]==1){
                    a[i][j]=mt[i][j]+a[i-1][j];
                }
            }
        }
        int mx=0;
        for(int i=0;i<n;i++){
            mx=max(mx,func(a[i]));
        }
        return mx;
    }
};
